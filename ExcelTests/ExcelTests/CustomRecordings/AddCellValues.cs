///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ExcelTests.CustomRecordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddCellValues recording.
    /// </summary>
    [TestModule("2bd2f101-856b-4a9c-af66-6bd6e2f762b2", ModuleType.Recording, 1)]
    public partial class AddCellValues : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::ExcelTests.ExcelTestsRepository repository.
        /// </summary>
        public static global::ExcelTests.ExcelTestsRepository repo = global::ExcelTests.ExcelTestsRepository.Instance;

        static AddCellValues instance = new AddCellValues();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddCellValues()
        {
            A1Cell = "25";
            A2Cell = "11";
            A3Cell = "2";
            A4Cell = "54";
            A5Cell = "109";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddCellValues Instance
        {
            get { return instance; }
        }

#region Variables

        string _A1Cell;

        /// <summary>
        /// Gets or sets the value of variable A1Cell.
        /// </summary>
        [TestVariable("a6439d42-cb7c-47e9-8a72-991a383db785")]
        public string A1Cell
        {
            get { return _A1Cell; }
            set { _A1Cell = value; }
        }

        string _A2Cell;

        /// <summary>
        /// Gets or sets the value of variable A2Cell.
        /// </summary>
        [TestVariable("497b5815-f198-4097-bf70-a699898810f6")]
        public string A2Cell
        {
            get { return _A2Cell; }
            set { _A2Cell = value; }
        }

        string _A3Cell;

        /// <summary>
        /// Gets or sets the value of variable A3Cell.
        /// </summary>
        [TestVariable("fcc9fd8b-e93d-43d6-a201-a6d99630c9a2")]
        public string A3Cell
        {
            get { return _A3Cell; }
            set { _A3Cell = value; }
        }

        string _A4Cell;

        /// <summary>
        /// Gets or sets the value of variable A4Cell.
        /// </summary>
        [TestVariable("0a40d3ec-1488-448d-939d-5b686b15f6c4")]
        public string A4Cell
        {
            get { return _A4Cell; }
            set { _A4Cell = value; }
        }

        string _A5Cell;

        /// <summary>
        /// Gets or sets the value of variable A5Cell.
        /// </summary>
        [TestVariable("6198ff56-551c-4822-828c-1fc0c514535b")]
        public string A5Cell
        {
            get { return _A5Cell; }
            set { _A5Cell = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "User", "Start Adding Cell Values", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'Book1Excel.CellA1'.", repo.Book1Excel.CellA1Info, new RecordItemIndex(1));
            repo.Book1Excel.CellA1.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A1Cell' with focus on 'Book1Excel.CellA1'.", repo.Book1Excel.CellA1Info, new RecordItemIndex(2));
            repo.Book1Excel.CellA1.PressKeys(A1Cell);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(3));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A2Cell' with focus on 'Book1Excel.CellA2'.", repo.Book1Excel.CellA2Info, new RecordItemIndex(4));
            repo.Book1Excel.CellA2.PressKeys(A2Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(5));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A3Cell' with focus on 'Book1Excel.CellA3'.", repo.Book1Excel.CellA3Info, new RecordItemIndex(6));
            repo.Book1Excel.CellA3.PressKeys(A3Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(7));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A4Cell' with focus on 'Book1Excel.CellA4'.", repo.Book1Excel.CellA4Info, new RecordItemIndex(8));
            repo.Book1Excel.CellA4.PressKeys(A4Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(9));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A5Cell' with focus on 'Book1Excel.CellA5'.", repo.Book1Excel.CellA5Info, new RecordItemIndex(10));
            repo.Book1Excel.CellA5.PressKeys(A5Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(11));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'Book1Excel.CellB1'.", repo.Book1Excel.CellB1Info, new RecordItemIndex(12));
            repo.Book1Excel.CellB1.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A1Cell' with focus on 'Book1Excel.CellB1'.", repo.Book1Excel.CellB1Info, new RecordItemIndex(13));
            repo.Book1Excel.CellB1.PressKeys(A1Cell);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(14));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A2Cell' with focus on 'Book1Excel.CellB2'.", repo.Book1Excel.CellB2Info, new RecordItemIndex(15));
            repo.Book1Excel.CellB2.PressKeys(A2Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(16));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A3Cell' with focus on 'Book1Excel.CellB3'.", repo.Book1Excel.CellB3Info, new RecordItemIndex(17));
            repo.Book1Excel.CellB3.PressKeys(A3Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(18));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A4Cell' with focus on 'Book1Excel.CellB4'.", repo.Book1Excel.CellB4Info, new RecordItemIndex(19));
            repo.Book1Excel.CellB4.PressKeys(A4Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(20));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$A5Cell' with focus on 'Book1Excel.CellB5'.", repo.Book1Excel.CellB5Info, new RecordItemIndex(21));
            repo.Book1Excel.CellB5.PressKeys(A5Cell);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(22));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "End Adding Cell Values", new RecordItemIndex(23));
            
            Report.Screenshot(ReportLevel.Info, "User", "Cell Values After Adding", repo.Book1Excel.Sheet1, false, new RecordItemIndex(24));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
