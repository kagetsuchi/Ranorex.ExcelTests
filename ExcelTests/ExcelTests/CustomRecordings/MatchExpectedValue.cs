///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ExcelTests.CustomRecordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The MatchExpectedValue recording.
    /// </summary>
    [TestModule("4c325e52-d201-46ec-a935-68c0bef0a6af", ModuleType.Recording, 1)]
    public partial class MatchExpectedValue : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::ExcelTests.ExcelTestsRepository repository.
        /// </summary>
        public static global::ExcelTests.ExcelTestsRepository repo = global::ExcelTests.ExcelTestsRepository.Instance;

        static MatchExpectedValue instance = new MatchExpectedValue();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public MatchExpectedValue()
        {
            NewComputedValue = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static MatchExpectedValue Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewComputedValue;

        /// <summary>
        /// Gets or sets the value of variable NewComputedValue.
        /// </summary>
        [TestVariable("a73177c9-8092-4017-8747-e66a0338ad92")]
        public string NewComputedValue
        {
            get { return _NewComputedValue; }
            set { _NewComputedValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'Book1Excel.CellA6'.", repo.Book1Excel.CellA6Info, new RecordItemIndex(0));
            repo.Book1Excel.CellA6.Focus();
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "Formula Cell Value", repo.Book1Excel.CellA6, false, new RecordItemIndex(1));
            
            Report.Log(ReportLevel.Info, "User", "Expected Value:", new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "User", NewComputedValue, new RecordItemIndex(3));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text=$NewComputedValue) on item 'Book1Excel.CellA6'.", repo.Book1Excel.CellA6Info, new RecordItemIndex(4));
                Validate.AttributeEqual(repo.Book1Excel.CellA6Info, "Text", NewComputedValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
